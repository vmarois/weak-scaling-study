This file has the purpose to document the work done on the topic of assessing FEniCS performance on an ARM architecture.

> Get an ARM computer (Odroid XU4 is good). In case you are picking this specific model (or another single board computer), you will be limited in RAM (2 Go for the XU4). Since the XU4 comes with an eMMC module that you can flash, it is advised to use a minimal version of ubuntu, which will maximize the RAm available for your application.

> There's no need to have a desktop GUI for this work, so the best way to communicate with the ARM computer is via using SSH.

> Run apt-get update && apt-get upgrade

> Install Git

> Install Docker.io

> You can verify that Docker is working correctly by running "docker run docker pull armhf/hello-world"

> Next, we need to modify how the FEniCS stable image is built : The stable image is built on top on the dev-env image, itself built on the base image, itself built on the phusion/baseimage-docker image, itself coming from ubuntu:16.04, which does not work on ARM. 
Fortunately, there is an image of ubuntu core which is built for ARM : multiarch/ubuntu-core:armhf-xenial. So we can build the phusion image from it. 

> Following is the build of the FEniCS base image : we simply have to build it FROM the newly created phusion image for ARM instead of the one for x86. 

> The FEniCS dev-env image requires more changes : the odroid xu4 is an arm32v7 architecture so some packages will not work. Especially, the following should be removed from the dev-env dockerfile:
	- Any install or setup related to a 64-bits architecture
	- The python3 install 
	- Git LFS
	- Matplotlib (? check)
	- 
